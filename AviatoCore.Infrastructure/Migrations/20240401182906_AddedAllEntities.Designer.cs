// <auto-generated />
using System;
using AviatoCore.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AviatoCore.Infrastructure.Migrations
{
    [DbContext(typeof(AviatoDbContext))]
    [Migration("20240401182906_AddedAllEntities")]
    partial class AddedAllEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AviatoCore.Domain.Entities.Airport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Airports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Avenida Van Troy y Final, Rancho Boyeros, Havana, Cuba",
                            IsDeleted = false,
                            Latitude = 22.9892,
                            Longitude = -82.409199999999998,
                            Name = "José Martí"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Matanzas, Cuba",
                            IsDeleted = false,
                            Latitude = 23.034400000000002,
                            Longitude = -81.435299999999998,
                            Name = "Juan Gualberto Gómez"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Carretera a Maleza Km 1 y medio, Santa Clara, Cuba",
                            IsDeleted = false,
                            Latitude = 22.4922,
                            Longitude = -79.943600000000004,
                            Name = "Abel Santamaría"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Holguín, Cuba",
                            IsDeleted = false,
                            Latitude = 20.785599999999999,
                            Longitude = -76.315100000000001,
                            Name = "Frank País"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Playa Baracoa, Havana, Cuba",
                            IsDeleted = false,
                            Latitude = 23.032800000000002,
                            Longitude = -82.579400000000007,
                            Name = "Playa Baracoa"
                        });
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.Client", b =>
                {
                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ClientTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClientId");

                    b.HasIndex("ClientTypeId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.ClientServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ClientServices");
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.ClientType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClientTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Regular"
                        },
                        new
                        {
                            Id = 2,
                            Name = "VIP"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Company"
                        });
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AirportId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacilityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AirportId");

                    b.HasIndex("FacilityTypeId");

                    b.ToTable("Facilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Street 15, 14077",
                            AirportId = 1,
                            Description = "A popular bakery offering a variety of breads and pastries.",
                            FacilityTypeId = 1,
                            ImgUrl = "https://res.cloudinary.com/dp9wcmorr/image/upload/v1711663766/womxzvcwlkmgebmkzypa.webp",
                            IsDeleted = false,
                            Name = "Breadway"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Street 20, 23078",
                            AirportId = 1,
                            Description = "A workshop specializing in aircraft maintenance and repair.",
                            FacilityTypeId = 2,
                            ImgUrl = "https://res.cloudinary.com/dp9wcmorr/image/upload/v1711663767/yej7dkz5v8nwp1cemm5l.jpg",
                            IsDeleted = false,
                            Name = "AMXWorkshop"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Street 5, 66778",
                            AirportId = 1,
                            Description = "A high-end shoe store offering a variety of stylish footwear.",
                            FacilityTypeId = 3,
                            ImgUrl = "https://res.cloudinary.com/dp9wcmorr/image/upload/v1711663768/gt2fpdjqrqoqqrvrltm5.jpg",
                            IsDeleted = false,
                            Name = "Tascon"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Street 1, 45556",
                            AirportId = 1,
                            Description = "A store offering a wide range of handcrafted goods from local artisans.",
                            FacilityTypeId = 4,
                            ImgUrl = "https://res.cloudinary.com/dp9wcmorr/image/upload/v1711663767/kbxqsrk2vu5xstwxrvxr.jpg",
                            IsDeleted = false,
                            Name = "ArtesaniaDominicana"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Street 20, 23078",
                            AirportId = 1,
                            Description = "A currency exchange service offering competitive rates.",
                            FacilityTypeId = 5,
                            ImgUrl = "https://res.cloudinary.com/dp9wcmorr/image/upload/v1711663767/i4tka668odgaukhbiigd.jpg",
                            IsDeleted = false,
                            Name = "CambioExchange"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Street 7, 12078",
                            AirportId = 2,
                            Description = "A Japanese restaurant offering a variety of sushi and other traditional dishes.",
                            FacilityTypeId = 6,
                            ImgUrl = "https://res.cloudinary.com/dp9wcmorr/image/upload/v1711663766/ryd91lefb0jsz0sfgr8x.jpg",
                            IsDeleted = false,
                            Name = "Ryu"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Street 1, 16078",
                            AirportId = 2,
                            Description = "An Italian restaurant offering a variety of pasta dishes and pizzas.",
                            FacilityTypeId = 7,
                            ImgUrl = "https://res.cloudinary.com/dp9wcmorr/image/upload/v1711663766/ovqroknpskzubu6g3trd.jpg",
                            IsDeleted = false,
                            Name = "Tagliatella"
                        });
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.FacilityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FacilityTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cafeteria"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Workshop"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Clothing Store"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Gift Shop"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Currency exchange office"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Sushi Bar"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Restaurant"
                        });
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AirportId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("NeedsCheck")
                        .HasColumnType("bit");

                    b.Property<int>("OwnerRoleId")
                        .HasColumnType("int");

                    b.Property<int>("PlaneConditionId")
                        .HasColumnType("int");

                    b.Property<int>("PlaneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AirportId");

                    b.HasIndex("OwnerRoleId");

                    b.HasIndex("PlaneConditionId");

                    b.HasIndex("PlaneId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.FlightRepair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<DateTime>("FinishedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<int>("RepairId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.HasIndex("RepairId");

                    b.ToTable("FlightRepairs");
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.FlightServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("ServiceCost")
                        .HasColumnType("float");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.HasIndex("ServiceId");

                    b.ToTable("FlightServices");
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.OwnerRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OwnersRole");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Passenger"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Captain"
                        });
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.Plane", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("CargoCapacity")
                        .HasColumnType("float");

                    b.Property<string>("Classification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CrewCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PassengerCapacity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Planes");
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.PlaneCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlaneConditions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "New"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Good"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Fair"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Poor"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Bad"
                        });
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.Repair", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("RepairTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RepairTypeId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Repairs");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            RepairTypeId = 1,
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 4,
                            RepairTypeId = 4,
                            ServiceId = 4
                        });
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.RepairDependency", b =>
                {
                    b.Property<int>("PlaneConditionId")
                        .HasColumnType("int");

                    b.Property<int>("RepairAId")
                        .HasColumnType("int");

                    b.Property<int>("RepairBId")
                        .HasColumnType("int");

                    b.HasKey("PlaneConditionId", "RepairAId", "RepairBId");

                    b.HasIndex("RepairAId");

                    b.HasIndex("RepairBId");

                    b.ToTable("RepairDependencies");
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.RepairType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RepairTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Engine Overhaul"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Hydraulic System Repair"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Electrical System Repair"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Avionics Repair"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Structural Repair"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Fuel System Repair"
                        });
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Delicious blend of gourmet coffee",
                            FacilityId = 1,
                            ImgUrl = "https://res.cloudinary.com/dp9wcmorr/image/upload/v1711962325/ee5y2czkx2nigv4qeasj.png",
                            IsDeleted = false,
                            Name = "Gourmet Coffee Blend",
                            Price = 2.9900000000000002
                        },
                        new
                        {
                            Id = 2,
                            Description = "Freshly baked pastries made with love",
                            FacilityId = 1,
                            ImgUrl = "https://res.cloudinary.com/dp9wcmorr/image/upload/v1711962325/ee5y2czkx2nigv4qeasj.png",
                            IsDeleted = false,
                            Name = "Freshly Baked Pastries",
                            Price = 3.4900000000000002
                        },
                        new
                        {
                            Id = 3,
                            Description = "Professional aircraft engine tune-up service",
                            FacilityId = 2,
                            ImgUrl = "https://res.cloudinary.com/dp9wcmorr/image/upload/v1711962325/ee5y2czkx2nigv4qeasj.png",
                            IsDeleted = false,
                            Name = "Aircraft Engine Tune-Up",
                            Price = 499.99000000000001
                        },
                        new
                        {
                            Id = 4,
                            Description = "Thorough avionic systems check for your aircraft",
                            FacilityId = 2,
                            ImgUrl = "https://res.cloudinary.com/dp9wcmorr/image/upload/v1711962325/ee5y2czkx2nigv4qeasj.png",
                            IsDeleted = false,
                            Name = "Avionic Systems Check",
                            Price = 299.99000000000001
                        },
                        new
                        {
                            Id = 5,
                            Description = "Custom-tailored pilot uniforms for a perfect fit",
                            FacilityId = 3,
                            ImgUrl = "https://res.cloudinary.com/dp9wcmorr/image/upload/v1711962325/ee5y2czkx2nigv4qeasj.png",
                            IsDeleted = false,
                            Name = "Tailored Pilot Uniforms",
                            Price = 199.99000000000001
                        },
                        new
                        {
                            Id = 6,
                            Description = "Stylish collection of flight jackets",
                            FacilityId = 3,
                            ImgUrl = "https://res.cloudinary.com/dp9wcmorr/image/upload/v1711962325/ee5y2czkx2nigv4qeasj.png",
                            IsDeleted = false,
                            Name = "Flight Jackets Collection",
                            Price = 149.99000000000001
                        },
                        new
                        {
                            Id = 7,
                            Description = "Beautiful handcrafted model aircraft",
                            FacilityId = 4,
                            ImgUrl = "https://res.cloudinary.com/dp9wcmorr/image/upload/v1711962325/ee5y2czkx2nigv4qeasj.png",
                            IsDeleted = false,
                            Name = "Handcrafted Model Aircraft",
                            Price = 59.990000000000002
                        },
                        new
                        {
                            Id = 8,
                            Description = "Unique aviation memorabilia for collectors",
                            FacilityId = 4,
                            ImgUrl = "https://res.cloudinary.com/dp9wcmorr/image/upload/v1711962325/ee5y2czkx2nigv4qeasj.png",
                            IsDeleted = false,
                            Name = "Aviation Memorabilia",
                            Price = 39.990000000000002
                        },
                        new
                        {
                            Id = 9,
                            Description = "Convenient foreign currency conversion service",
                            FacilityId = 5,
                            ImgUrl = "https://res.cloudinary.com/dp9wcmorr/image/upload/v1711962325/ee5y2czkx2nigv4qeasj.png",
                            IsDeleted = false,
                            Name = "Foreign Currency Conversion",
                            Price = 0.98999999999999999
                        },
                        new
                        {
                            Id = 10,
                            Description = "Secure traveler's cheque issuance service",
                            FacilityId = 5,
                            ImgUrl = "https://res.cloudinary.com/dp9wcmorr/image/upload/v1711962325/ee5y2czkx2nigv4qeasj.png",
                            IsDeleted = false,
                            Name = "Traveler's Cheque Issuance",
                            Price = 1.99
                        },
                        new
                        {
                            Id = 11,
                            Description = "Fresh and delicious sashimi selection",
                            FacilityId = 6,
                            ImgUrl = "https://res.cloudinary.com/dp9wcmorr/image/upload/v1711962325/ee5y2czkx2nigv4qeasj.png",
                            IsDeleted = false,
                            Name = "Sashimi Selection",
                            Price = 18.989999999999998
                        },
                        new
                        {
                            Id = 12,
                            Description = "Exquisite signature sushi rolls",
                            FacilityId = 6,
                            ImgUrl = "https://res.cloudinary.com/dp9wcmorr/image/upload/v1711962325/ee5y2czkx2nigv4qeasj.png",
                            IsDeleted = false,
                            Name = "Signature Sushi Rolls",
                            Price = 15.99
                        },
                        new
                        {
                            Id = 13,
                            Description = "Authentic Italian pasta dishes",
                            FacilityId = 7,
                            ImgUrl = "https://res.cloudinary.com/dp9wcmorr/image/upload/v1711962325/ee5y2czkx2nigv4qeasj.png",
                            IsDeleted = false,
                            Name = "Authentic Italian Pasta Selection",
                            Price = 12.99
                        },
                        new
                        {
                            Id = 14,
                            Description = "Delicious gourmet pizza delivered to your location",
                            FacilityId = 7,
                            ImgUrl = "https://res.cloudinary.com/dp9wcmorr/image/upload/v1711962325/ee5y2czkx2nigv4qeasj.png",
                            IsDeleted = false,
                            Name = "Gourmet Pizza Delivery Service",
                            Price = 15.99
                        });
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.Worker", b =>
                {
                    b.Property<string>("WorkerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AirportId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("WorkerId");

                    b.HasIndex("AirportId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Director",
                            NormalizedName = "DIRECTOR"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Security",
                            NormalizedName = "SECURITY"
                        },
                        new
                        {
                            Id = "4",
                            Name = "Maintenance",
                            NormalizedName = "MAINTENANCE"
                        },
                        new
                        {
                            Id = "5",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.Client", b =>
                {
                    b.HasOne("AviatoCore.Domain.Entities.ClientType", "ClientType")
                        .WithMany("Clients")
                        .HasForeignKey("ClientTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AviatoCore.Domain.Entities.User", "User")
                        .WithOne("Client")
                        .HasForeignKey("AviatoCore.Domain.Entities.Client", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.ClientServices", b =>
                {
                    b.HasOne("AviatoCore.Domain.Entities.Client", "Client")
                        .WithMany("ClientServices")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AviatoCore.Domain.Entities.Service", "Service")
                        .WithMany("ClientServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.Facility", b =>
                {
                    b.HasOne("AviatoCore.Domain.Entities.Airport", "Airport")
                        .WithMany("Facilities")
                        .HasForeignKey("AirportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AviatoCore.Domain.Entities.FacilityType", "FacilityType")
                        .WithMany("Facilities")
                        .HasForeignKey("FacilityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Airport");

                    b.Navigation("FacilityType");
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.Flight", b =>
                {
                    b.HasOne("AviatoCore.Domain.Entities.Airport", "Airport")
                        .WithMany("Flights")
                        .HasForeignKey("AirportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AviatoCore.Domain.Entities.OwnerRole", "OwnerRole")
                        .WithMany("Flights")
                        .HasForeignKey("OwnerRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AviatoCore.Domain.Entities.PlaneCondition", "PlaneCondition")
                        .WithMany("Flights")
                        .HasForeignKey("PlaneConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AviatoCore.Domain.Entities.Plane", "Plane")
                        .WithMany("Flights")
                        .HasForeignKey("PlaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Airport");

                    b.Navigation("OwnerRole");

                    b.Navigation("Plane");

                    b.Navigation("PlaneCondition");
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.FlightRepair", b =>
                {
                    b.HasOne("AviatoCore.Domain.Entities.Flight", "Flight")
                        .WithMany("FlightRepairs")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AviatoCore.Domain.Entities.Repair", "Repair")
                        .WithMany("FlightRepairs")
                        .HasForeignKey("RepairId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Flight");

                    b.Navigation("Repair");
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.FlightServices", b =>
                {
                    b.HasOne("AviatoCore.Domain.Entities.Flight", "Flight")
                        .WithMany("FlightServices")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AviatoCore.Domain.Entities.Service", "Service")
                        .WithMany("FlightServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Flight");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.Plane", b =>
                {
                    b.HasOne("AviatoCore.Domain.Entities.Client", "Owner")
                        .WithMany("Planes")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.Repair", b =>
                {
                    b.HasOne("AviatoCore.Domain.Entities.RepairType", "RepairType")
                        .WithMany("Repairs")
                        .HasForeignKey("RepairTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AviatoCore.Domain.Entities.Service", "Service")
                        .WithMany("Repairs")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RepairType");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.RepairDependency", b =>
                {
                    b.HasOne("AviatoCore.Domain.Entities.PlaneCondition", "PlaneCondition")
                        .WithMany("RepairDependencies")
                        .HasForeignKey("PlaneConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AviatoCore.Domain.Entities.Repair", "RepairA")
                        .WithMany("RepairADependencies")
                        .HasForeignKey("RepairAId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AviatoCore.Domain.Entities.Repair", "RepairB")
                        .WithMany("RepairBDependencies")
                        .HasForeignKey("RepairBId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PlaneCondition");

                    b.Navigation("RepairA");

                    b.Navigation("RepairB");
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.Review", b =>
                {
                    b.HasOne("AviatoCore.Domain.Entities.Client", "Client")
                        .WithMany("Reviews")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AviatoCore.Domain.Entities.Service", "Service")
                        .WithMany("Reviews")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.Service", b =>
                {
                    b.HasOne("AviatoCore.Domain.Entities.Facility", "Facility")
                        .WithMany("Services")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.Worker", b =>
                {
                    b.HasOne("AviatoCore.Domain.Entities.Airport", "Airport")
                        .WithMany("Workers")
                        .HasForeignKey("AirportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AviatoCore.Domain.Entities.User", "User")
                        .WithOne("Worker")
                        .HasForeignKey("AviatoCore.Domain.Entities.Worker", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Airport");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AviatoCore.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AviatoCore.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AviatoCore.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AviatoCore.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.Airport", b =>
                {
                    b.Navigation("Facilities");

                    b.Navigation("Flights");

                    b.Navigation("Workers");
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.Client", b =>
                {
                    b.Navigation("ClientServices");

                    b.Navigation("Planes");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.ClientType", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.Facility", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.FacilityType", b =>
                {
                    b.Navigation("Facilities");
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.Flight", b =>
                {
                    b.Navigation("FlightRepairs");

                    b.Navigation("FlightServices");
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.OwnerRole", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.Plane", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.PlaneCondition", b =>
                {
                    b.Navigation("Flights");

                    b.Navigation("RepairDependencies");
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.Repair", b =>
                {
                    b.Navigation("FlightRepairs");

                    b.Navigation("RepairADependencies");

                    b.Navigation("RepairBDependencies");
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.RepairType", b =>
                {
                    b.Navigation("Repairs");
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.Service", b =>
                {
                    b.Navigation("ClientServices");

                    b.Navigation("FlightServices");

                    b.Navigation("Repairs");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("AviatoCore.Domain.Entities.User", b =>
                {
                    b.Navigation("Client");

                    b.Navigation("Worker");
                });
#pragma warning restore 612, 618
        }
    }
}
